-- ServerScriptService/BankManager
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Actions = ReplicatedStorage:WaitForChild("Actions")
local GetBankItemsEvent = Actions:WaitForChild("GetBankItems")
local DepositItemEvent = Actions:WaitForChild("DepositItemEvent")
local WithdrawItemEvent = Actions:WaitForChild("WithdrawItem")
local RearrangeBankEvent = Actions:WaitForChild("RearrangeBank")
local SetPlaceholderEvent = Actions:WaitForChild("SetPlaceholder")

local DataManager = require(script.Parent:WaitForChild("DataManager"))
local ItemDatabase = require(ReplicatedStorage:WaitForChild("Configs"):WaitForChild("ItemDatabase"))

local BankManager = {}
BankManager.MAX_SLOTS_PER_TAB = 800

function BankManager:GetBank(player)
	local data = DataManager.GetData(player)
	if not data.Bank then
		data.Bank = {tabs = {{}}, placeholders = {}}
		DataManager.SetData(player, data)
	end
	if not data.Bank.tabs[1] then
		data.Bank.tabs[1] = {}
	end
	return data.Bank
end

function BankManager:DepositItem(player, itemId, quantity, tabIndex, data)
	local bank = self:GetBank(player)
	local tab = bank.tabs[tabIndex] or {}
	local itemEntry = {itemId = itemId, quantity = quantity, data = data}

	if ItemDatabase[itemId].stackable and not data then
		for i, existingItem in ipairs(tab) do
			if existingItem.itemId == itemId and not existingItem.data then
				existingItem.quantity = existingItem.quantity + quantity
				DataManager.SetData(player, DataManager.GetData(player))
				GetBankItemsEvent:FireClient(player, bank.tabs, tabIndex)
				return true
			end
		end
	end

	table.insert(tab, itemEntry)
	DataManager.SetData(player, DataManager.GetData(player))
	GetBankItemsEvent:FireClient(player, bank.tabs, tabIndex)
	return true
end

function BankManager:WithdrawItem(player, itemId, quantity, tabIndex, slotIndex)
	local bank = self:GetBank(player)
	local tab = bank.tabs[tabIndex]
	if tab[slotIndex] and tab[slotIndex].itemId == itemId then
		local item = tab[slotIndex]
		if item.quantity >= quantity then
			item.quantity = item.quantity - quantity
			if item.quantity <= 0 then
				table.remove(tab, slotIndex)
			end
			DataManager.SetData(player, DataManager.GetData(player))
			GetBankItemsEvent:FireClient(player, bank.tabs, tabIndex)
			return true
		end
	end
	return false
end

function BankManager:RearrangeBank(player, fromTab, fromSlot, toTab, toSlot)
	local bank = self:GetBank(player)
	local fromTabData = bank.tabs[fromTab]
	local toTabData = bank.tabs[toTab]
	if fromTabData[fromSlot] then
		local item = table.remove(fromTabData, fromSlot)
		table.insert(toTabData, toSlot, item)
		DataManager.SetData(player, DataManager.GetData(player))
		GetBankItemsEvent:FireClient(player, bank.tabs, toTab)
	end
end

DepositItemEvent.OnServerEvent:Connect(function(player, itemId, quantity, tabIndex, data)
	BankManager:DepositItem(player, itemId, quantity, tabIndex, data)
end)

WithdrawItemEvent.OnServerEvent:Connect(function(player, itemId, quantity, tabIndex, slotIndex)
	BankManager:WithdrawItem(player, itemId, quantity, tabIndex, slotIndex)
end)

RearrangeBankEvent.OnServerEvent:Connect(function(player, fromTab, fromSlot, toTab, toSlot)
	BankManager:RearrangeBank(player, fromTab, fromSlot, toTab, toSlot)
end)

return BankManager