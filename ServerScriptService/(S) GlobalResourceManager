-- ServerScriptService/GlobalResourceManager
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Actions = ReplicatedStorage:WaitForChild("Actions")
local FellEvent = Actions:WaitForChild("FellEvent")
local StopChoppingEvent = Actions:WaitForChild("StopChopping")
local InventoryManager = require(script.Parent:WaitForChild("InventoryManager"))

print("[Level Up Larry] GlobalResourceManager starting")

local function chopTree(player, tree)
	local itemMap = {
		["Oak Tree"] = {itemId = 1, name = "Oak Logs", chance = 0.56},
		["Willow Tree"] = {itemId = 3, name = "Willow Logs", chance = 0.336},
		["Yew Tree"] = {itemId = 4, name = "Yew Logs", chance = 0.2},
	}
	local treeData = itemMap[tree.Name]
	if not treeData then return end

	print("[Level Up Larry] " .. player.Name .. " chopping " .. tree.Name .. " with success chance: " .. treeData.chance)
	local roll = math.random()
	print("[Level Up Larry] Roll for " .. player.Name .. ": " .. roll .. " vs " .. treeData.chance)
	if roll <= treeData.chance then
		InventoryManager.AddItem(player, treeData.itemId, 1)
		FellEvent:FireClient(player, treeData.name, 1)
		print("[Level Up Larry] " .. player.Name .. " received 1 " .. treeData.name)
	end
end

FellEvent.OnServerEvent:Connect(function(player, tree)
	if tree and (tree.Name == "Oak Tree" or tree.Name == "Willow Tree" or tree.Name == "Yew Tree") then
		print("[Level Up Larry] Received FellEvent from " .. player.Name .. " for " .. tree.Name)
		if tree:IsA("Model") and not tree.PrimaryPart then
			tree.PrimaryPart = tree:FindFirstChild("Trunk") or tree:FindFirstChildWhichIsA("MeshPart")
			print("[Level Up Larry] Server set PrimaryPart to " .. tree.PrimaryPart.Name .. " for " .. tree.Name)
		end
		chopTree(player, tree)
	end
end)

StopChoppingEvent.OnServerEvent:Connect(function(player, tree)
	if tree then
		print("[Level Up Larry] Received StopChoppingEvent from " .. player.Name .. " for " .. tree.Name)
	end
end)

print("[Level Up Larry] GlobalResourceManager initialized")