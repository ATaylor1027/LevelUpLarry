-- ServerScriptService/DataManager
local DataStoreService = game:GetService("DataStoreService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local playerDataStore = DataStoreService:GetDataStore("LevelUpLarryData")
local playerData = {}
local dataReady = {}

local DATA_VERSION = 1

local function savePlayerData(player)
	local userId = player.UserId
	local data = playerData[userId]
	if data then
		data.Version = DATA_VERSION
		local success, err = pcall(function()
			playerDataStore:SetAsync(userId, data)
		end)
		if not success then
			warn("[Level Up Larry] Failed to save data for " .. player.Name .. ": " .. err)
		else
			print("[Level Up Larry] Saved data for " .. player.Name)
		end
	end
end

local function loadPlayerData(player)
	local userId = player.UserId
	local success, data = pcall(function()
		return playerDataStore:GetAsync(userId)
	end)
	if success and data then
		-- Handle versioning for future-proofing
		if data.Version ~= DATA_VERSION then
			print("[Level Up Larry] Migrating data for " .. player.Name .. " from version " .. (data.Version or "unknown") .. " to " .. DATA_VERSION)
			-- Example migration logic (unchanged from previous)
			if data.Inventory and not data.Inventory[1] then
				local oldInventory = data.Inventory
				data.Inventory = {}
				for i = 1, 28 do
					data.Inventory[i] = nil
				end
				for itemName, amount in pairs(oldInventory) do
					local itemId = nil
					for id, item in pairs(require(game.ReplicatedStorage.Configs.ItemDatabase)) do
						if item.name == itemName then
							itemId = id
							break
						end
					end
					if itemId then
						for i = 1, 28 do
							if not data.Inventory[i] then
								data.Inventory[i] = {itemId = itemId, quantity = amount}
								break
							end
						end
					end
				end
			end
			if not data.Bank then
				data.Bank = {tabs = { [1] = {} }, placeholders = {}}
				for i = 1, 800 do
					data.Bank.tabs[1][i] = nil
				end
			end
			if data.IsMuted == nil then -- Ensure IsMuted exists
				data.IsMuted = false
			end
			data.Version = DATA_VERSION
		end
		playerData[userId] = data
		print("[Level Up Larry] Loaded data for " .. player.Name)
	else
		-- Default data for new players (unchanged)
		local defaultSkills = {
			Woodcutting = 0, Mining = 0, Fishing = 0, Cooking = 0, Hitpoints = 1154
		}
		local defaultInventory = {}
		for i = 1, 28 do
			defaultInventory[i] = nil
		end
		local defaultBank = {tabs = { [1] = {} }, placeholders = {}}
		for i = 1, 800 do
			defaultBank.tabs[1][i] = nil
		end
		playerData[userId] = {
			Inventory = defaultInventory,
			Equipment = {},
			Bank = defaultBank,
			Skills = defaultSkills,
			Playtime = 0,
			Version = DATA_VERSION,
			IsMuted = false
		}
		print("[Level Up Larry] Created new data for " .. player.Name .. " with default skills")
	end
	dataReady[userId] = true

	-- Replicate IsMuted to client
	local dataFolder = Instance.new("Folder")
	dataFolder.Name = "Data"
	dataFolder.Parent = player
	local isMutedValue = Instance.new("BoolValue")
	isMutedValue.Name = "IsMuted"
	isMutedValue.Value = playerData[userId].IsMuted
	isMutedValue.Parent = dataFolder
	-- Sync changes back to data table
	isMutedValue.Changed:Connect(function(newValue)
		playerData[userId].IsMuted = newValue
		DataManager.SetData(player, playerData[userId])
	end)

	return playerData[userId]
end

Players.PlayerAdded:Connect(function(player)
	loadPlayerData(player)
end)

Players.PlayerRemoving:Connect(function(player)
	savePlayerData(player)
	playerData[player.UserId] = nil
	dataReady[player.UserId] = nil
end)

game:BindToClose(function()
	for _, player in pairs(Players:GetPlayers()) do
		savePlayerData(player)
	end
end)

local function waitForData(player)
	local userId = player.UserId
	while not dataReady[userId] do
		RunService.Heartbeat:Wait()
	end
end

return {
	GetData = function(player)
		waitForData(player)
		return playerData[player.UserId]
	end,
	SetData = function(player, data)
		waitForData(player)
		playerData[player.UserId] = data
	end
}